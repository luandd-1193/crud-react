{"version":3,"sources":["components/AddTodo.js","components/ToDoList.js","App.js","serviceWorker.js","index.js"],"names":["AddTodo","state","Id","Title","Status","isEditTitle","isEditStatus","handleIdChange","event","setState","target","value","handleTitleChange","handleStatusChange","handleToDoSubmit","preventDefault","props","todo","onEdit","onAdd","this","onSubmit","className","onChange","placeholder","disabled","type","Component","TodoList","todos","curentTodo","ID","isEdit","time","Date","toLocaleString","deleteToDo","filteredItems","filter","x","handleEditTodo","map","editToDo","renderForm","addToDo","intervalID","setInterval","tick","clearInterval","key","style","color","onClick","icon","library","add","faTrash","faEdit","faPlus","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"qRACqBA,E,4MAErBC,MAAQ,CACNC,GAAI,GACJC,MAAO,GACPC,OAAQ,GACRC,aAAa,EACbC,cAAc,G,EAGhBC,eAAiB,SAACC,GAChB,EAAKC,SAAS,CACVP,GAAIM,EAAME,OAAOC,S,EAIvBC,kBAAoB,SAACJ,GACnB,EAAKC,SAAS,CACVN,MAAOK,EAAME,OAAOC,MACpBN,aAAa,K,EAInBQ,mBAAqB,SAACL,GACpB,EAAKC,SAAS,CACVL,OAAQI,EAAME,OAAOC,MACrBL,cAAc,K,EAIpBQ,iBAAmB,SAACN,GAElB,GADAA,EAAMO,iBACH,EAAKC,MAAMC,KAAM,CAAC,IAAD,EACQ,EAAKhB,MAAvBE,EADU,EACVA,MAAOC,EADG,EACHA,OAEf,EAAKY,MAAME,OAAO,CAChBhB,GAAI,EAAKc,MAAMC,KAAKf,GACpBC,MAAOA,GAAgB,EAAKa,MAAMC,KAAKd,MACvCC,OAAQA,GAAkB,EAAKY,MAAMC,KAAKb,cAG5C,EAAKY,MAAMG,MAAM,CACfjB,GAAI,EAAKD,MAAMC,GACfC,MAAO,EAAKF,MAAME,MAClBC,OAAQ,EAAKH,MAAMG,SAIvB,EAAKK,SAAS,CACVP,GAAI,GACJC,MAAO,GACPC,OAAQ,GACRC,aAAa,EACbC,cAAc,K,uDAIR,IAAD,EACgDc,KAAKnB,MAAtDC,EADC,EACDA,GAAIC,EADH,EACGA,MAAOC,EADV,EACUA,OAAQC,EADlB,EACkBA,YAAaC,EAD/B,EAC+BA,aAOtC,OANGc,KAAKJ,MAAMC,OACZf,EAAKkB,KAAKJ,MAAMC,KAAKf,GACrBC,EAAQE,EAAce,KAAKnB,MAAME,MAAQiB,KAAKJ,MAAMC,KAAKd,MACzDC,EAASE,EAAec,KAAKnB,MAAMG,OAASgB,KAAKJ,MAAMC,KAAKb,QAI5D,6BACE,4BACKgB,KAAKJ,MAAMC,KAAO,YAAc,YAErC,0BAAMI,SAAUD,KAAKN,kBACnB,yBAAKQ,UAAU,cACX,2BAAOX,MAAOT,EACZqB,SAAUH,KAAKb,eACfe,UAAU,eACVE,YAAY,WACZC,SAAUL,KAAKJ,MAAMC,KAAO,WAAa,MAE/C,yBAAKK,UAAU,cACX,2BAAOX,MAAOR,EACZoB,SAAUH,KAAKR,kBACfU,UAAU,eACVE,YAAY,iBAElB,yBAAKF,UAAU,cACX,4BAAQC,SAAUH,KAAKP,mBACrBS,UAAU,eACVX,MAAOP,GACL,4BAAQO,MAAM,IAAd,UACA,4BAAQA,MAAM,QAAd,QACA,4BAAQA,MAAM,WAAd,aAGR,4BAAQe,KAAK,SAASJ,UAAU,gCAAiCF,KAAKJ,MAAMC,KAAO,YAAc,kB,GA7FtEU,a,OCGhBC,E,4MAErB3B,MAAQ,CACL4B,MAAO,CACL,CAAE3B,GAAI,IAAKC,MAAO,2BAA4BC,OAAQ,QACtD,CAAEF,GAAI,IAAKC,MAAO,wBAAyBC,OAAQ,YAErD0B,WAAY,CAACC,GAAI,GAAI5B,MAAO,GAAIC,OAAQ,IACxC4B,QAAQ,EACRC,MAAM,IAAIC,MAAOC,kB,EAkBpBC,WAAa,SAACnB,GACZ,IAAMoB,EAAgB,EAAKpC,MAAM4B,MAAMS,QAAO,SAAAC,GAAC,OAAIA,EAAErC,KAAOe,EAAKf,MACjE,EAAKO,SAAS,CACToB,MAAOQ,K,EAIdG,eAAiB,SAACD,GAChB,EAAK9B,UAAS,SAAAR,GAAK,MAAK,CACtB4B,MAAO5B,EAAM4B,MAAMY,KAAI,SAAAxB,GACrB,OAAIA,EAAKf,KAAOqC,EAAErC,GACTqC,EAEAtB,KAGXe,QAAQ,O,EAIZU,SAAW,SAACH,GACV,EAAK9B,SAAS,CAACqB,WAAYS,EAAGP,QAAQ,IACtC,EAAKW,WAAWJ,I,EAGlBK,QAAU,SAAC3B,GACT,EAAKR,SAAS,CACZoB,MAAM,GAAD,mBAAM,EAAK5B,MAAM4B,OAAjB,CAAwBZ,O,kEA1CZ,IAAD,OAClBG,KAAKyB,WAAaC,aAChB,kBAAM,EAAKC,SACX,O,6CAIFC,cAAc5B,KAAKyB,c,6BAGnBzB,KAAKX,SAAS,CACZwB,MAAM,IAAIC,MAAOC,qB,mCAmCP,IAAD,EACoBf,KAAKnB,MAA5B+B,EADG,EACHA,OAAQF,EADL,EACKA,WAChB,OAAGE,EACO,kBAAC,EAAD,CAASf,KAAMa,EAAYZ,OAAQE,KAAKoB,iBAE1C,kBAAC,EAAD,CAASrB,MAAOC,KAAKwB,Y,+BAGnB,IAAD,OACP,OACE,yBAAKtB,UAAU,aACZF,KAAKnB,MAAMgC,KACZ,yBAAKX,UAAU,OACb,yBAAKA,UAAU,YACb,wCACA,2BAAOA,UAAU,oCACd,+BACE,4BACG,kCACA,qCACA,sCACA,wCAGL,+BACKF,KAAKnB,MAAM4B,MAAMY,KAAI,SAAAF,GACpB,OACK,wBAAIU,IAAKV,EAAErC,IACX,4BAAKqC,EAAErC,IACP,4BAAKqC,EAAEpC,OACP,wBAAI+C,MAAO,CAAEC,MAAoB,SAAbZ,EAAEnC,OAAoB,QAAU,QAAUmC,EAAEnC,QAChE,4BACE,4BAAQkB,UAAU,uBAAuB8B,QAAS,kBAAM,EAAKV,SAASH,KACpE,8BAAM,kBAAC,IAAD,CAAiBc,KAAK,WAE9B,4BAAQ/B,UAAU,iBAAiB8B,QAAS,kBAAM,EAAKhB,WAAWG,KAChE,8BAAM,kBAAC,IAAD,CAAiBc,KAAK,oBAShD,yBAAK/B,UAAU,YACZF,KAAKuB,oB,GAxGoBhB,a,sBCCtC2B,IAAQC,IAAIC,IAASC,IAAQC,KAUdC,MARf,WACE,OACE,yBAAKrC,UAAU,OACb,kBAAC,EAAD,QCEcsC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.3abb094b.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nexport default class AddTodo extends Component {\n\nstate = {\n  Id: \"\",\n  Title: \"\",\n  Status: \"\",\n  isEditTitle: false,\n  isEditStatus: false\n};\n\nhandleIdChange = (event) => {\n  this.setState({\n      Id: event.target.value\n  });\n};\n\nhandleTitleChange = (event) => {\n  this.setState({\n      Title: event.target.value,\n      isEditTitle: true\n  });\n};\n\nhandleStatusChange = (event) => {\n  this.setState({\n      Status: event.target.value,\n      isEditStatus: true\n  });\n};\n\nhandleToDoSubmit = (event) => {\n  event.preventDefault();\n  if(this.props.todo) {\n    const { Title, Status } = this.state;\n\n    this.props.onEdit({\n      Id: this.props.todo.Id,\n      Title: Title ? Title : this.props.todo.Title,\n      Status: Status ? Status : this.props.todo.Status\n    });\n  } else {\n    this.props.onAdd({\n      Id: this.state.Id,\n      Title: this.state.Title,\n      Status: this.state.Status\n    });\n  }\n\n  this.setState({\n      Id: \"\",\n      Title: \"\",\n      Status: \"\",\n      isEditTitle: false,\n      isEditStatus: false\n  });\n};\n\n  render() {\n    let { Id, Title, Status, isEditTitle, isEditStatus } = this.state\n    if(this.props.todo) {\n      Id = this.props.todo.Id;\n      Title = isEditTitle ? this.state.Title : this.props.todo.Title;\n      Status = isEditStatus ? this.state.Status : this.props.todo.Status;\n    }\n\n    return (\n      <div>\n        <h3>\n            {this.props.todo ? \"Edit todo\" : \"Add todo\"}\n        </h3>\n        <form onSubmit={this.handleToDoSubmit}>\n          <div className=\"form-group\" >\n              <input value={Id}\n                onChange={this.handleIdChange}\n                className=\"form-control\"\n                placeholder=\"Enter Id\"\n                disabled={this.props.todo ? \"disabled\" : \"\"} />\n          </div>\n          <div className=\"form-group\" >\n              <input value={Title}\n                onChange={this.handleTitleChange}\n                className=\"form-control\"\n                placeholder=\"Enter Title\"/>\n          </div>\n          <div className=\"form-group\">\n              <select onChange={this.handleStatusChange}\n                className=\"form-control\"\n                value={Status}>\n                  <option value=\"\" >Status</option>\n                  <option value=\"Done\" >Done</option>\n                  <option value=\"Pending\" >Pending</option>\n              </select>\n          </div>\n          <button type=\"submit\" className=\"form-control btn btn-primary\" >{this.props.todo ? \"Edit todo\" : \"Add todo\"}</button>\n        </form>\n      </div>\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport AddTodo from \"./AddTodo\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\n\nexport default class TodoList extends Component {\n\nstate = {\n   todos: [\n     { Id: '1', Title: 'Push your code to github', Status: 'Done' },\n     { Id: '2', Title: 'Email to your manager', Status: 'Pending' }\n   ],\n   curentTodo: {ID: '', Title: '', Status: ''},\n   isEdit: false,\n   time: new Date().toLocaleString()\n};\n\ncomponentDidMount() {\n  this.intervalID = setInterval(\n    () => this.tick(),\n    1000\n  );\n}\ncomponentWillUnmount() {\n  clearInterval(this.intervalID);\n}\ntick() {\n  this.setState({\n    time: new Date().toLocaleString()\n  });\n}\n\ndeleteToDo = (todo) => {\n  const filteredItems = this.state.todos.filter(x => x.Id !== todo.Id);\n  this.setState({\n       todos: filteredItems\n  });\n};\n\nhandleEditTodo = (x) => {\n  this.setState(state => ({\n    todos: state.todos.map(todo => {\n      if (todo.Id === x.Id) {\n        return x\n      } else {\n        return todo;\n      }\n    }),\n    isEdit: false\n  }));\n}\n\neditToDo = (x) => {\n  this.setState({curentTodo: x, isEdit: true})\n  this.renderForm(x);\n};\n\naddToDo = (todo) => {\n  this.setState({\n    todos: [...this.state.todos, todo]\n  });\n};\n\nrenderForm() {\n  const { isEdit, curentTodo } = this.state;\n  if(isEdit)\n    return (<AddTodo todo={curentTodo} onEdit={this.handleEditTodo}/>)\n\n  return (<AddTodo onAdd={this.addToDo}/>)\n}\n\n  render() {\n    return (\n      <div className=\"container\">\n        {this.state.time}\n        <div className=\"row\">\n          <div className=\"col-md-6\">\n            <h1>TodoList</h1>\n            <table className=\"table table-hover table-bordered\">\n               <thead>\n                 <tr>\n                    <th>Id</th>\n                    <th>Title</th>\n                    <th>Status</th>\n                    <th>Action</th>\n                 </tr>\n               </thead>\n               <tbody>\n                   {this.state.todos.map(x => {\n                     return (\n                          <tr key={x.Id}>\n                          <td>{x.Id}</td>\n                          <td>{x.Title}</td>\n                          <td style={{ color: x.Status === \"Done\" ? \"green\" : \"red\" }}>{x.Status}</td>\n                          <td>\n                            <button className=\"mr-3 btn btn-primary\" onClick={() => this.editToDo(x)}>\n                              <span><FontAwesomeIcon icon=\"edit\"/></span>\n                            </button>\n                            <button className=\"btn btn-danger\" onClick={() => this.deleteToDo(x)}>\n                              <span><FontAwesomeIcon icon=\"trash\"/></span>\n                            </button>\n                          </td>\n                          </tr>\n                      );\n                   })}\n                </tbody>\n            </table>\n          </div>\n          <div className=\"col-md-6\">\n            {this.renderForm()}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport ToDoList from \"./components/ToDoList.js\";\nimport './App.css';\nimport { library } from \"@fortawesome/fontawesome-svg-core\";\nimport { faTrash, faPlus, faEdit } from \"@fortawesome/free-solid-svg-icons\";\nlibrary.add(faTrash, faEdit, faPlus);\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <ToDoList/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}